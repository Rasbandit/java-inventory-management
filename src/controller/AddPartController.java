package controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.InHouse;
import model.Outsourced;
import utils.Util;


import java.io.IOException;

/** The controller for the AddPart scene. */
public class AddPartController {

    @FXML
    private RadioButton inHouseRadio;

    @FXML
    private TextField nameInput;

    @FXML
    private TextField invInput;

    @FXML
    private TextField priceInput;

    @FXML
    private TextField maxInput;

    @FXML
    private TextField minInput;

    @FXML
    private Label customLabel;

    @FXML
    private TextField bonusInput;

    private static Integer autoGeneratedId = 100;

    @FXML
    /** This method will return the user to the home scene. */
    public void goHome(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/home.fxml"));
        String css = this.getClass().getResource("/view/index.css").toExternalForm();
        Stage stage = (Stage) ((Node)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root);
        scene.getStylesheets().add(css);
        stage.setTitle("Home");
        stage.setScene(scene);

        stage.show();
    }

    @FXML
    /** Create and add a new part to the Parts list. */
    public void savePart(ActionEvent actionEvent) throws IOException {
        /** RUNTIME ERROR
         *  To Prevent the the error of a user trying entering a string
         *  number for values like Min and Max some logic is done
         *  to ensure its possible to convert it to a integer.
         * */

        String baseErrorMessage = "The Following Errors were found:\n";
        String errorMessages = "";

        if(!Util.isDoubleParsable(priceInput.getText()))
            errorMessages += "Price must be a number\n";
        if(!Util.isIntegerParsable(invInput.getText()))
            errorMessages += "Inventory must be a number\n";
        if(!Util.isIntegerParsable(minInput.getText()))
            errorMessages += "Min must be a number\n";
        if(!Util.isIntegerParsable(maxInput.getText()))
            errorMessages += "Max must be a number\n";
        if(inHouseRadio.isSelected() && !Util.isIntegerParsable(bonusInput.getText()))
            errorMessages += "Machine Id must be a number\n";

        if(errorMessages != "") {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Validation Error");
            alert.setHeaderText(baseErrorMessage);
            alert.setContentText(errorMessages);

            alert.showAndWait();
            return;
        }

        Double price = Double.parseDouble(priceInput.getText());
        Integer stock = Integer.parseInt(invInput.getText());
        Integer min = Integer.parseInt(minInput.getText());
        Integer max = Integer.parseInt(maxInput.getText());

        if(min > max)
            errorMessages += "Min must be smaller than Max\n";
        if(stock < min || stock > max)
            errorMessages += "Stock must be between Min and Max\n";

        if(errorMessages != "") {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Validation Error");
            alert.setHeaderText(baseErrorMessage);
            alert.setContentText(errorMessages);

            alert.showAndWait();
            return;
        }

        if(inHouseRadio.isSelected()) {
            Integer machineId = Integer.parseInt(bonusInput.getText());
            InHouse newPart = new InHouse(autoGeneratedId++, nameInput.getText(), price, stock, min, max, machineId);
            InHouse.addItem(newPart);
        } else {
            String companyName = bonusInput.getText();
            Outsourced newPart = new Outsourced(autoGeneratedId++, nameInput.getText(), price, stock, min, max, companyName);
            Outsourced.addItem(newPart);
        }
        goHome(actionEvent);
    }

    @FXML
    /** Sets the new part to being a InHouse part. */
    public void setIsInHouse() {
        customLabel.setText("Machine ID");
    }

    @FXML
    /** Sets the new part to being an Outsourced part. */
    public void setIsOutsourced() {
        customLabel.setText("Company Name");
    }
}
